#!/bin/bash

function require_root {

	if [ "x$DOCKER_HOST" == "x" ] && [ "$EUID" -ne 0 ] && [ $(groups | grep -v docker 2>&1 > /dev/null) ]
		then echo "Please run as root"
		exit 1
	fi
}


SELF=$0
if [ -L "$0"  ] ; then
	SELF=$(readlink -f $0)
fi
SCRIPTPATH=$(dirname $SELF)

. $SCRIPTPATH/upgrade_lib.sh

function read_link {
	if [ "`uname`" == "Linux" ] ; then
		DIRECTORY=$(readlink -f $1)
	else
		DIRECTORY=$(cd "$(dirname "$1")" && pwd -P)
	fi
	echo $DIRECTORY
}

PARAMETERS=( ${*:2} )
if svn info > /dev/null 2>&1 ; then
	SVN_VERSION="r$(svn info | grep Revision | awk '{ print $2 }')"
	svn status | egrep -v '\bdeploy' | egrep -v '\bdocker' | awk '{ print $1; }' | egrep 'M|A|D' 2>&1 > /dev/null && SVN_VERSION="$SVN_VERSION"c
fi

#
# Necessary Configuration:
#
# PROJECT_NAME=donepm - docker-compose project name
# DOCKER_REPOSITORY_USER=ipunkt
# DOCKER_REPOSITORY_NAME=app
# DOCKER_TAG_PREFIX=donepm_ - Prefix for docker tags
# RANCHER_SERVICE_NAME=DonePM - rancher service name
#
#
source deploy/config.cfg

source $SCRIPTPATH/usage.sh
source $SCRIPTPATH/setup.sh

function getWebId {
	docker ps | grep -i $PROJECT_NAME | grep $RANCHER_SERVICE_NAME | awk '{ print $1; }'
}

function getWebTestId {
	docker ps | grep -i $PROJECT_NAME | grep $RANCHER_SERVICE_NAME | awk '{ print $1; }'
}

#
# Read an Environment config
#
# Parameter
# 1 - Environment name
#
function readEnvironmentConfig {

	local ENVIRONMENT_CONFIG="deploy/$1/config.cfg"
	if [ ! -f $ENVIRONMENT_CONFIG ] ; then
		echo "Error: Configuration file '$ENVIRONMENT_CONFIG' is missing."
		return 1
	fi

	source $ENVIRONMENT_CONFIG
}

#
# This
#
# Parameter
# 1 - Variable to set
# 2 - Default value
# 3 - Value
#
function getParameter {

	VARIABLE="$1"
	DEFAULT_VALUE="$2"
	VALUE="$3"

	if [ -z "$VALUE" ] ; then
		eval $VARIABLE="$DEFAULT_VALUE"
		echo "Defaulting $VARIABLE to '$DEFAULT_VALUE'"
		return
	fi

	eval $VARIABLE="$VALUE"
	return

}

function commit {
	VERSION=$DOCKER_REPOSITORY_USER/$DOCKER_REPOSITORY_NAME:$DOCKER_TAG_PREFIX$1
	docker build -t $VERSION . && docker push $VERSION
	echo $1 > deploy/latest_commit
}

#
# Perform a rolling upgrade
#
function upgrade {
	OLDPWD=$PWD
	RANCHER_STACK=$1
	DEPLOY_DIRECTORY=$2
	NEW_VERSION=$3

	cd $DEPLOY_DIRECTORY

	if ! update_compose $RANCHER_ACCESS_KEY $RANCHER_SECRET_KEY $RANCHER_API_URL $RANCHER_STACK_ID ; then
		echo "Failed to update docker-compose.yml and rancher-compose.yml from server"
		exit 4
	fi

	CURRENT_SERVICE=$(find_version $RANCHER_SERVICE_NAME | xargs)
	if [ -z "$CURRENT_SERVICE" ] ; then
		echo "Failed to find active service for $RANCHER_SERVICE_NAME, unable to upgrade"
		exit 3
	fi
	NEW_SERVICE=$RANCHER_SERVICE_NAME-$NEW_VERSION

	add_version $RANCHER_SERVICE_NAME $NEW_VERSION

	if [ "$CURRENT_SERVICE" == "$NEW_SERVICE" ] ; then
		echo "Attempting to upgrade to the already active revision"
		echo "This causes malfunctions in rancher"
		echo "Attempt canceled"

		cd $OLDPWD
		exit 2
	fi

	echo Upgrading from $CURRENT_SERVICE to $NEW_SERVICE

	MAXIMUM_ATTEMPTS=5
	ATTEMPTS=0
	until rancher-compose --access-key "$RANCHER_ACCESS_KEY" --secret-key "$RANCHER_SECRET_KEY" \
							--url "$RANCHER_API_URL" \
	                        -p $RANCHER_STACK upgrade -w $CURRENT_SERVICE $NEW_SERVICE ; do
		let ATTEMPTS+=1

		if [ "$ATTEMPTS" -gt "$MAXIMUM_ATTEMPTS" ] ; then
			echo "Upgrade failed more than $MAXIMUM_ATTEMPTS times, aborting"
			cd $OLDPWD
			exit 1
		fi

		echo "Attempt to upgrade $CURRENT_SERVICE to $NEW_SERVICE failed, trying once more in 1s"
		sleep 1s
	done

	echo "Successfuly upgraded"

	cd $OLDPWD
}

#
# Deploy the app for the first time
#
function deploy {

	OLDPWD=$PWD
	RANCHER_STACK=$1
	DEPLOY_DIRECTORY=$2
	NEW_VERSION=$3

	cd $DEPLOY_DIRECTORY

	rm -f docker-compose.yml
	rm -f rancher-compose.yml

	NEW_SERVICE=$RANCHER_SERVICE_NAME-$NEW_VERSION

	add_version $RANCHER_SERVICE_NAME $NEW_VERSION

	rancher-compose --url "$RANCHER_API_URL" --access-key "$RANCHER_ACCESS_KEY" --secret-key "$RANCHER_SECRET_KEY" -p $RANCHER_STACK up

}

case $1 in
	start|recreate)
		require_root
		DIRECTORY=$2
		MOUNTPATH_PATH="deploy/.mountpath"
		if [ $# -lt 2 ] ; then
			if [ ! -f "$MOUNTPATH_PATH" ] ; then
				echo "No mountpath specified and none previously remembered"

				usage start
				exit 1
			fi
			DIRECTORY=$(cat $MOUNTPATH_PATH)
		fi

		#DIRECTORY=$(cd "$(dirname "$DIRECTORY")" && pwd -P)
		DIRECTORY=$(read_link $DIRECTORY)
		ESCAPED_DIRECTORY=$(echo $DIRECTORY | sed -e 's/[\/&]/\\&/g')
		cat deploy/docker-compose.yml.tpl | sed -e "s/#CODE_DIRECTORY#/$ESCAPED_DIRECTORY/g" > deploy/docker-compose.yml

		if [ "$1" = "recreate" ] ; then
			docker-compose -f deploy/docker-compose.yml -p $PROJECT_NAME stop
			docker-compose -f deploy/docker-compose.yml -p $PROJECT_NAME rm
		fi

		docker-compose -f deploy/docker-compose.yml -p $PROJECT_NAME up -d
		echo $DIRECTORY > $MOUNTPATH_PATH
		;;
	stop)
		require_root
		docker-compose -f deploy/docker-compose.yml -p $PROJECT_NAME stop
		if [ "$2" = "-rm" ] ; then
			docker-compose -f deploy/docker-compose.yml -p $PROJECT_NAME rm
		fi
		;;
	test-start)
		require_root
		getParameter VERSRION $SVN_VERSION "$2"

		getParameter ENVIRONMENT "staging" "$3"

		cat deploy/docker-test.yml.tpl | sed -e "s/%VERSION%/$VERSION/g" | sed -e "s/%ENVIRONMENT%/$ENVIRONMENT/g" > deploy/docker-test.yml
		docker-compose -f deploy/docker-test.yml -p $PROJECT_NAME up -d
		;;
	test-stop)
		require_root
		docker-compose -f deploy/docker-test.yml -p $PROJECT_NAME stop
		;;
	test-command)
		require_root
		if [ $# -lt 2 ] ; then
			echo "Command missing.";
			exit 1
		fi
		COMMAND=$2

		PARAMETERS=( ${*:3} )
		COMMANDLINE="$COMMAND ${PARAMETERS[@]}"
		docker exec `getWebTestId` \
			bash -c "cd /var/www/laravel/ ; $COMMANDLINE"
		;;
	artisan)
		require_root
		 docker exec -i -t `getWebId` \
			 /var/www/laravel/artisan ${PARAMETERS[@]}
		;;
	logs)
		require_root
		 docker logs ${PARAMETERS[@]} `getWebId`
		;;
	commit)
		require_root

		getParameter VERSION "$SVN_VERSION" "$2"

		commit $VERSION
		;;
	deploy|upgrade)
		getParameter ENVIRONMENT "staging" "$2"
		getParameter VERSION "$(cat deploy/latest_commit)" "$3"

		readEnvironmentConfig $ENVIRONMENT || exit 1

		validateConfig || exit 2

		# RANCHER_STACK muss in der config.cfg gesetzt werden
		DEPLOY_DIRECTORY="deploy/$ENVIRONMENT"

		if [ "$1" = "deploy" ] ; then
			deploy $RANCHER_STACK $DEPLOY_DIRECTORY $VERSION
		else
			upgrade $RANCHER_STACK $DEPLOY_DIRECTORY $VERSION
		fi

		;;
	pull-up)
		getParameter SOURCE_ENVIRONMENT "staging" "$2"
		getParameter TARGET_ENVIRONMENT "production" "$3"

		#
		# Retrieve SOURCE_ENVIRONMENT current revision
		#
		readEnvironmentConfig $SOURCE_ENVIRONMENT || exit 1

		validateConfig || exit 2

		OLDPWD="$PWD"
		cd $DEPLOY_DIRECTORY

		if ! update_compose $RANCHER_ACCESS_KEY $RANCHER_SECRET_KEY $RANCHER_API_URL $RANCHER_STACK_ID ; then
			echo "Failed to update docker-compose.yml and rancher-compose.yml from server"
			exit 4
		fi

		TARGET_REVISION=$(find_version $RANCHER_SERVICE_NAME | xargs | sed "s/$RANCHER_SERVICE_NAME-//g")
		echo "current revision on $SOURCE_ENVIRONMENT: $TARGET_REVISION"
		cd "$OLDPWD"


		#
		# Upgrade TARGET_ENVIRONMENT revision
		#

		readEnvironmentConfig $TARGET_ENVIRONMENT || exit 1

		validateConfig || exit 2
		DEPLOY_DIRECTORY="deploy/$TARGET_ENVIRONMENT"

		echo $DEPLOY_DIRECTORY
		upgrade $RANCHER_STACK $DEPLOY_DIRECTORY $TARGET_REVISION

		;;
	revision)
		echo Current revision: $SVN_VERSION
		exit 0
		;;
	help)
		usage $PARAMETERS
		exit 0
		;;
	setup)
		setup
		exit 0
		;;
	setup-environment)
		getParameter ENVIRONMENT "staging" $2
		getParameter DEFAULT_ENVIRONMENT "staging" $3

		setup-environment
		exit 0
		;;
	*)
		usage
		exit 0
		;;
esac
