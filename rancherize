#!/usr/bin/env php
<?php

require __DIR__.'/app/bootstrap.php';

use Rancherize\Blueprint\Commands\BlueprintAdd;
use Rancherize\Blueprint\Commands\BlueprintList;
use Rancherize\Blueprint\Validation\Exceptions\ValidationFailedException;
use Rancherize\Configuration\Services\ProjectConfiguration;
use Symfony\Component\Console\Application;
use Symfony\Component\EventDispatcher\EventDispatcher;

$dispatcher = new EventDispatcher();
$application = new Application();
$application->setDispatcher($dispatcher);


$dispatcher->addListener(\Symfony\Component\Console\ConsoleEvents::EXCEPTION, function(\Symfony\Component\Console\Event\ConsoleExceptionEvent $event) {

	$e = $event->getException();
	$output = $event->getOutput();


	if ( $e instanceof ValidationFailedException ) {

		$formatter = $output->getFormatter();

		$headline = ' Validation failed ';
		$output->writeln( [
			'',
			' ' . $formatter->format( sprintf( "<error> %s </error>", str_repeat(' ', strlen($headline)) ) ) . ' ',
			$formatter->format(" <error> $headline </error>"),
			' ' . $formatter->format( sprintf( "<error> %s </error>", str_repeat('=', strlen($headline)) ) ) . ' ',
			' ' . $formatter->format( sprintf( "<error> %s </error>", str_repeat(' ', strlen($headline)) ) ) . ' ',
			"",
		]);

		container('validate-service')->print($e, $output);
	}

});

// ... register commands
$application->add(new \Rancherize\Commands\InitCommand());
$application->add(new \Rancherize\Commands\StartCommand());
$application->add(new \Rancherize\Commands\StopCommand());
$application->add(new \Rancherize\Commands\BuildCommand());
$application->add(new \Rancherize\Commands\PushCommand());
$application->add(new \Rancherize\Commands\ValidateCommand());
$application->add(new \Rancherize\Commands\RancherAccessCommand());
$application->add(new \Rancherize\Commands\EnvironmentSetCommand());
$application->add(new \Rancherize\Commands\EnvironmentVersionCommand());
$application->add(new \Rancherize\Plugin\Commands\PluginInstallCommand());
$application->add(new \Rancherize\Plugin\Commands\PluginRegisterCommand());
$application->add(new BlueprintAdd());
$application->add(new BlueprintList());

try {

	/**
	 * @var ProjectConfiguration $projectConfig
	 */
	$projectConfig = container('project-config-service');

	$configuration = container('configuration');
	$configuration = $projectConfig->load($configuration);
	container()->offsetSet('project-config', $configuration);

	/**
	 * @var \Rancherize\Plugin\Loader\PluginLoader $pluginLoader
	 */
	$pluginLoader = container('plugin-loader');
	$pluginLoader->load( $configuration, $application, container() );

} catch(Exception $e) {

    echo "Warning! Load Plugins failed: ". $e->getMessage();

}


$returnCode = $application->run();


return $returnCode;
